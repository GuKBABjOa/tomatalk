spring:
  application:
    name: tolonbgeub
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: jdbc:h2:mem:test
    username: sa
    password:
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: false # SQL 포맷팅
        highlight_sql: true # ANSI 코드에 색을 나타낸다
    #        use_sql_comments: true # SQL 내부에 /* */ 주석 추가
#        defer-datasource-initialization: true # script 파일이 hibernate 초기화 이후 동작하게 하기 위한 옵션
    hibernate:
      ddl-auto: create # 실제 배포 환경에서는 다른 옵션을 사용해야 합니다.
    open-in-view: false
app:
  image:
    base-url: ${APP_IMAGE_BASE_URL}


springdoc:
#  packages-to-scan: kr.ac.sejong.ds.restaurant  # Swagger 문서를 생성할 컨트롤러가 포함된 패키지를 지정
#  paths-to-match: /**  # 문서화할 경로를 지정합니다. /**는 모든 경로를 의미

  swagger-ui:
    path: /api/docs  # 생성된 API 문서의 경로를 지정
  api-docs:
    path: /api/docs/json  # 생성된 API 문서의 경로를 지정
    groups:
      enabled: true  # 그룹별로 API 문서를 생성할지 여부 (기본값: true)
  cache:
    disabled: true  # Swagger 문서의 캐싱을 사용하지 않도록 설정 (기본값: false)

  # 기본적으로 사용할 요청 및 응답의 미디어 타입을 설정
  default-produces-media-type: application/json;charset=UTF-8
  default-consumes-media-type: application/json;charset=UTF-8

jwt:
  issuer: ${JWT_ISSUER}
  secret: ${JWT_SECRET}
  expiry-seconds: ${JWT_EXPIRY_SECONDS}
  refresh-expiry-seconds: ${JWT_REFRESH_EXPIRY_SECONDS}
auth:
  scheme: "Bearer"
  header: Authorization
oauth:
  kakao:
    client-id: ${KAKAO_REST_API_KEY}
    client-secret: ${KAKAO_CLIENT_SECRET}
    redirect-url: ${KAKAO_REDIRECT_URL} # 프론트 url
    access_token_api: ${KAKAO_TOKEN_API}
    get_userinfo_api: ${KAKAO_USERINFO_API}

OPENVIDU_URL: ${OPENVIDU_URL}
OPENVIDU_SECRET: ${OPENVIDU_SECRET}
logging:
  level:
    team:
      overfullow:
        tolonbgeub: debug